parameters:
  platform: 'Win32'
  architecture: ''
  configuration: 'Release'
  name: 'Win32'

jobs:
- job: '${{ parameters.name }}'
  variables:
    ${{ if eq(parameters.architecture, '') }}:
      target: '${{ parameters.platform }}-${{ parameters.configuration }}'
      sourceFolder: '$(Build.SourcesDirectory)/win/build/bin/v142/${{ parameters.platform }}/${{ parameters.configuration }}/'
    ${{ if ne(parameters.architecture, '') }}:
      target: '${{ parameters.platform }}-${{ parameters.configuration }}-${{ parameters.architecture }}'
      sourceFolder: '$(Build.SourcesDirectory)/win/build/bin/v142_${{ parameters.architecture }}/${{ parameters.platform }}/${{ parameters.configuration }}/'

  pool:
    vmImage: 'windows-2019'

  steps:
  - task: NuGetToolInstaller@0

  - task: NuGetCommand@2
    inputs:
      restoreSolution: 'win/audacity.sln'

  - bash: |
      GIT_DESCRIBE=$(git describe --tags --dirty --always)
      echo "##vso[task.setvariable variable=BUILD_NAME]${GIT_DESCRIBE}"
      echo "##vso[task.setvariable variable=ZIP_FILE_NAME]$(Build.ArtifactStagingDirectory)/audacity-vs2019-$(target)-${GIT_DESCRIBE}.zip"
      echo "#define REV_LONG $(git show -s --format=\"%H\")" > src/RevisionIdent.h
      echo "#define REV_TIME $(git show -s --format=\"%ci\")" >> src/RevisionIdent.h
      echo "#define REV_DESCRIBE ${GIT_DESCRIBE}" >> src/RevisionIdent.h
      echo "#define REV_BRANCH \"$(git rev-parse --abbrev-ref HEAD)\"" >> src/RevisionIdent.h
    displayName: git describe

  - task: MSBuild@1
    inputs:
      platform: '${{ parameters.platform }}'
      solution: 'win\top.proj'
      configuration: '${{ parameters.configuration }}'
      ${{ if ne(parameters.architecture, '') }}:
        msbuildArguments: '/p:Architecture=${{ parameters.architecture }}'
      maximumCpuCount: true
    displayName: Build top.proj

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(sourceFolder)'
      contents: '**/?(*.exe|*.dll|*.ny|*.lsp|*.raw|*.txt|*.mo)'
      targetFolder: '$(Build.ArtifactStagingDirectory)/$(BUILD_NAME)/$(target)'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/$(BUILD_NAME)/$(target)'
      includeRootFolder: false
      archiveFile: '$(ZIP_FILE_NAME)'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(ZIP_FILE_NAME)'
      artifactName: '${{ parameters.name }}'

